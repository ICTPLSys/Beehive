#pragma once

#include <cstdlib>
#include <iostream>
#include <vector>

#include "rdma/exchange_msg.hpp"
#include "rdma/rdma.hpp"

namespace Beehive {
namespace rdma {

class Server {
private:
    const Configure &config;
    void *buffer;

    Context ctx;
    ProtectionDomain pd;
    MemoryRegion mr;
    CompleteQueue cq;

    // qps[0]: control qp
    // qps[1...]: data qp
    std::vector<QueuePair> used_qps;
public:
    Server(const Configure &config) : 
        config(config),
        buffer(std::aligned_alloc(Beehive::PAGE_SIZE, config.server_buffer_size)), 
        ctx(), 
        pd(ctx),
        mr(pd, buffer, config.server_buffer_size), 
        cq(ctx, config) {}

    Server(const Server &) = delete;

    ~Server() { std::free(buffer); }

    void *get(size_t offset) { return static_cast<char *>(buffer) + offset; }

    void start() {
        ClientConnectionInfo *client_conn_info = nullptr;
        srand48(time(nullptr));
        uint32_t psn = lrand48() & 0xffffff;
        ibv_port_attr port_attr;
        ibv_query_port(ctx.context, config.ib_port, &port_attr);

        int sock_fd;
        int conn_fd = tcp::listen_for_client(
            config.server_addr.c_str(), config.server_port.c_str(), sock_fd);
        
        size_t used_qps_cnt = config.max_thread_cnt * config.qp_count + 1;
        size_t client_info_size =
            sizeof(ClientConnectionInfo) + sizeof(uint32_t) * used_qps_cnt;
        auto client_info =
            static_cast<ClientConnectionInfo *>(std::malloc(client_info_size));
        ssize_t recv_size = recv(conn_fd, client_info, client_info_size, 0);
        ASSERT(recv_size > sizeof(ClientConnectionInfo));
        ASSERT(client_info->qp_count == used_qps_cnt);
        ASSERT(recv_size == sizeof(ClientConnectionInfo) +
                                sizeof(uint32_t) * used_qps_cnt);

        for (size_t i = 0;i < used_qps_cnt;i++) {
            used_qps.emplace_back(ctx, cq, pd, config);
        }

        size_t server_info_size = sizeof(ServerConnectionInfo) +
                                  sizeof(uint32_t) * used_qps_cnt;
        auto server_info =
            static_cast<ServerConnectionInfo *>(std::malloc(server_info_size));
        server_info->addr = reinterpret_cast<uint64_t>(buffer);
        server_info->lid = port_attr.lid;
        server_info->psn = psn;
        server_info->qp_count = used_qps_cnt;
        server_info->rkey = mr.memory_region->rkey;

        for (size_t i = 0;i < used_qps_cnt;i++) {
            server_info->qpn[i] = used_qps[i].queue_pair->qp_num;
        }
        ssize_t sent_size = send(conn_fd, server_info, server_info_size, 0);
        ASSERT(sent_size == server_info_size);

        std::free(server_info);
        CHECK_ERR(close(conn_fd));
        CHECK_ERR(close(sock_fd));

        // modify state to RTR
        for (size_t i = 0;i < used_qps_cnt;i++) {
            used_qps[i].ready_to_recv(client_info->lid, client_info->psn,
                                client_info->qpn[i], config);
        }
        std::free(client_info);

        /* ================ INITIALIZED ================ */
        std::cout << "server started" << std::endl;

        // wait for control message
        ibv_recv_wr recv_stop_wr = {
            .wr_id = RQ_STOP,
            .next = nullptr,
            .sg_list = nullptr, // TODO
            .num_sge = 0,
        };
        
        ibv_recv_wr *bad_wr;
        QueuePair &qp = used_qps[0];
        ibv_post_recv(qp.queue_pair, &recv_stop_wr, &bad_wr);
        // construct order must be cq->qp
        while (true) {
            // TODO use solicited event
            ibv_wc work_completion;
            int poll_ret = ibv_poll_cq(cq.complete_queue, 1, &work_completion);
            ASSERT(poll_ret <= 1);
            if (poll_ret == 1) {
                ASSERT(work_completion.wr_id == RQ_STOP);
                ASSERT(work_completion.status == IBV_WC_SUCCESS);
                std::cout << "server stopped" << std::endl;
                break;
            }
        }
    }
};

}  // namespace rdma
}  // namespace Beehive